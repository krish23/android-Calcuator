package com.krish.calculator;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;

import android.os.Bundle;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class MainActivity extends Activity{

	EditText txt_display;
	String AlgOp;
	ArrayList<String> _inputKeys = new ArrayList<String>();
	int key = 0;
	LinkedList<Integer> AlgOP_Queue=new LinkedList<Integer>();
	LinkedList<Double> Answer_Queue = new LinkedList<Double>();
	
	Iterator iterator;
	double number1;
	double number2;
	double _answer;
	int operator1;
	int operator2;
	String beforeDec;
	/* Decimals */
	int sizeOfNum;
	double divideNum;
	boolean isDecimal;
	StringBuffer numbers = new StringBuffer();
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		txt_display = (EditText)findViewById(R.id.txt_display);
		//Disable the android keyboard
		txt_display.setInputType(0);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_main, menu);
		return true;
	}

	public void _getInputKeys(View v) 
	{
	   String _input = v.getTag().toString();
       String keys = _input.toString();
       String displayText = txt_display.getText().toString();
       
	   //Display all the inputs to the screen
	   if(displayText.equals("0"))
	   {
		   txt_display.setText(keys.toString());
	   }else
	   {
		   if(!keys.toString().equals("="))
		   {
			   txt_display.append(keys.toString());
		   }
		}
	   
	   //Push the values and operators to the list of arrays
	   
	   
	   //Analize the operators and push that into queue according to the BODMAS rules
	   // Divide - 1, Multiply - 2, Addition - 3, Subtract - 4
	   
	   if(keys.equals("/") || keys.equals("*") || keys.equals("+") || keys.equals("-"))
	   { 
		   
		   if(isDecimal)
		   {
			   String dec = numbers.toString();
			   sizeOfNum = dec.length();
			   divideNum = Math.pow(10,sizeOfNum );
			   double addDec = Integer.parseInt(dec) / divideNum;
			   double decimalNumber = Double.parseDouble(beforeDec) + addDec;
			    
			   _inputKeys.add(Double.toString(decimalNumber));
			    isDecimal = false; 
		   }
		   
		   String getNumbers = numbers.toString();
		   if(!getNumbers.equals("0"))
		   {
			   _inputKeys.add(getNumbers.toString());
		   }
	       int len = numbers.length();
	       numbers.delete(0, numbers.length());
	       
		   _inputKeys.add(keys.toString());
		   
		   // Push onto the Queue
		   addToQueue( _inputKeys.size() - 1 );
	   }
	   else if(keys.equals("."))
	   {
		   //Make the number decimal
		   
		   //Get the first part of the number
		   beforeDec = numbers.toString();
		   isDecimal = true;
		   numbers.delete(0, numbers.length()); 
		   
	   }
	   else if(keys.equals("-/+"))
	   {
		   //make the number negative or positive
		   
	   }
	   else if(keys.equals("="))
	   {
		   String getNumbers = numbers.toString();
		   _inputKeys.add(getNumbers.toString());
		   int len = numbers.length();
		   numbers.delete(0, len); 
		   
		   //EVALUATION
		   evaluator();
		   
	   }
	   else
	   {
		   //Numbers
		   if(numbers.length()==0)
		   {
			   numbers.insert(0,keys.toString());
		   }else
		   {
			   numbers.append(keys.toString());
		   }
		   
		   
	   }
	   
	}
	
	public void addToQueue(int index_AlgOp)
	{
		
		//Following the BODMAS rules
		
		if(AlgOP_Queue.isEmpty())
		{
			AlgOP_Queue.add(index_AlgOp);
		}
		else
		{
			operator1 = priorityLevel( _inputKeys.get( AlgOP_Queue.peek() ) );
			operator2 = priorityLevel( _inputKeys.get( index_AlgOp ) );
			
			//Swap the operators
			if( operator1 > operator2  )
			{
				/*
				 * Usecase : If * in the queue and insert +, then compare the operators and swap it
				 * */
				
				swapOperators(index_AlgOp);
			}
			else
			{
				AlgOP_Queue.add(index_AlgOp);
			}
		}
	}
	
	public int priorityLevel(String AlgOp)
	{
		int priority = 0;
		
		if(AlgOp.equals("/"))
		{
			priority = 4;
		}
		else if(AlgOp.equals("*"))
		{
			priority = 3;
		}
		else if(AlgOp.equals("+"))
		{
			priority = 2;
		}
		else
		{
			priority = 1;
		}
		
		return priority;
		
	}
	
	@SuppressLint("NewApi")
	public void evaluator()
	{	
		int i;
		int symbol_value;
		String previous_value;
		String next_value;
		String before_prev;
		String getSymbol;
		//Iterate the queue until its empty
		for(i=0;AlgOP_Queue.size()>0;i++)
		{
			//Pop the stack and get the value
			symbol_value = AlgOP_Queue.pollLast();
			getSymbol = _inputKeys.get(symbol_value);
			//replace with @
			_inputKeys.set((symbol_value), "@");
			
			if(getSymbol=="@")
			{
				//get the previous value and next value
				previous_value = _inputKeys.get(symbol_value - 1);
				next_value = _inputKeys.get(symbol_value + 1);
				
				if(!previous_value.equals("@") && !next_value.equals("@"))
				{
				
					//Look the before previous value(if negative applies)
					try {
						before_prev = _inputKeys.get(symbol_value - 2);
						if(before_prev.equals("-"))
						{
							previous_value = Double.toString(Double.parseDouble(previous_value) * (-1));
							//replace with @
							_inputKeys.set((symbol_value - 2), "@");
						}
						
					}catch(Exception e)
					{}
					
					//Add to the answer queue
					addToAnswerQueue(Double.parseDouble(previous_value));
			   }
			}
			else
			{
				//Check in the previous index
				previous_value = _inputKeys.get(symbol_value - 1);
				
				if(previous_value=="@")
				{
					next_value = _inputKeys.get(symbol_value + 1);
					if(next_value!="@")
					{
						answerCompute(getSymbol,Double.parseDouble(next_value));
						//replace by @
						_inputKeys.set((symbol_value + 1), "@");
					}else{}
				}else
				{
					//Get the previous value
					//Look the before previous value(if negative applies)
					try {
						before_prev = _inputKeys.get(symbol_value - 2);
						if(before_prev.equals("-"))
						{
							previous_value = Double.toString(Double.parseDouble(previous_value) * (-1));
							//replace with @
							_inputKeys.set((symbol_value - 2), "@");
						}
						
					}catch(Exception e)
					{}
					number1 = Double.parseDouble(previous_value);
				    //replace that by @
					_inputKeys.set((symbol_value - 1), "@");
				}
				
			    //Check in the next index
				if(previous_value!="@")
				{
					next_value = _inputKeys.get(symbol_value + 1);
					
					if(next_value=="@")
					{
						answerCompute(getSymbol,Double.parseDouble(previous_value));
						//replace by @
						_inputKeys.set((symbol_value - 1), "@");
						
					}
					else
					{
						number2 = Double.parseDouble(next_value);
					    //replace that by @
						_inputKeys.set((symbol_value + 1), "@");
						
						//Do the calculation
						if(getSymbol.equals("/"))
						{
							_answer = number1 / number2;
						}
						else if(getSymbol.equals("*"))
						{
							_answer = number1 * number2;
						}
						else if(getSymbol.equals("+"))
						{
							_answer = number1 + number2;
						}
						else if(getSymbol.equals("-"))
						{
							_answer = number1 - number2;
						}
						else 
						{}
							
						//Push to the answer queue
						//txt_display.setText(Double.toString(_answer));
						addToAnswerQueue(_answer);
					}
				}
				else
				{
				}
			}	
		}
		//Final computation
		finalComputation();
	}
	
	@SuppressLint("NewApi")
	public void swapOperators(int Op)
	{
		/*(1) Pop the head element*/
		
		int poped_op =  AlgOP_Queue.pollLast();
		
		/*(2) Insert the element*/
		
		AlgOP_Queue.add(Op);
		
		/*(3) Now push the poped value*/
		
		AlgOP_Queue.add(poped_op);
	}
	
	public void addToAnswerQueue(double number)
	{
		Answer_Queue.add(number);
	}
	
	@SuppressLint("NewApi")
	public void answerCompute(String symbol,double number)
	{
		double answer = 0;
		//pop the head
		double headNumber = Answer_Queue.pollLast();
		if(symbol.equals("*"))
		{
			answer = headNumber * number;
		}else if(symbol.equals("/"))
		{
			answer = headNumber / number;
		}
		else if(symbol.equals("+"))
		{
			answer = headNumber + number;
		}else if(symbol.equals("-"))
		{
			answer = headNumber - number;
		}else
		{
			
		}
		
		//push back to the answer queue
		Answer_Queue.add(answer);
	}
	
	
	public void finalComputation()
	{	
		double finalAnswer = 0;
		double number;
		iterator = Answer_Queue.iterator();
		while (iterator.hasNext())
		{
			number = (Double) iterator.next();
			finalAnswer = finalAnswer + number;
		}
		
		//Display the Answer
		txt_display.setText(Double.toString(finalAnswer));
	}
	
	/*public int [] sortOperators(LinkedList<Integer> UnsortLL)
	{
		/*int lenD = UnsortLL.size();
		int pivot = 0;
		int ind = lenD/2;
		int i,j = 0,k = 0;
		if(lenD<2){
		  
		}
		else{
		  int[] L = new int[lenD];
		  int[] R = new int[lenD];
		  int[] sorted = new int[lenD];
		  pivot = priorityLevel(_inputKeys.get(AlgOP_Queue.get(ind)));
		  for(i=0;i<lenD;i++){
		    if(i!=ind){
		      if(priorityLevel(_inputKeys.get(AlgOP_Queue.get(i)))<pivot){
		        L[j] = priorityLevel(_inputKeys.get(AlgOP_Queue.get(i)));
		        j++;
		      }
		      else{
		        R[k] = priorityLevel(_inputKeys.get(AlgOP_Queue.get(i)));
		        k++;
		      }
		    }
		  }
		  int[] sortedL = new int[j];
		  int[] sortedR = new int[k];
		  System.arraycopy(L, 0, sortedL, 0, j);
		  System.arraycopy(R, 0, sortedR, 0, k);
		  sortedL = sortOperators(sortedL);
		  sortedR = sortOperators(sortedR);
		  System.arraycopy(sortedL, 0, sorted, 0, j);
		  sorted[j] = pivot;
		  System.arraycopy(sortedR, 0, sorted, j+1, k);
		  return sorted;
		  }
		  
	}*/
	

}
